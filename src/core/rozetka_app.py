import re
import time
import concurrent.futures
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor
from typing import (
    Optional, 
    Dict, 
    Tuple, 
    List, 
    Set, 
    Any
)

from fake_useragent import UserAgent

from src.api.rozetka import RozetkaAPI
from src.utils.logger import Logger
from src.core.settings import load_settings, Settings
from src.utils.data_exporters import (
    CSVWriter, 
    JSONWriter, 
    read_txt
)


class ApplicationRozetka:

    def __init__(
            self, 
            settings: Optional[Settings] = None, 
            logger: Optional[Logger] = None
    ) -> None:
        self.logger = logger or Logger()
        self.settings = settings or load_settings()
        self.data = [] 


    def create_api_workers(
            self, 
            num_workers: int = 10
        ) -> List[RozetkaAPI]:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ—Ä–∫–µ—Ä–æ–≤ RozetkaAPI —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        """
        workers = []
        ua = UserAgent()  # –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä
        
        for i in range(num_workers):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π User-Agent –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
            user_agent = ua.random
            
            worker = RozetkaAPI(
                proxy=None,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–æ—Ç–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏
                user_agent=user_agent,  # –ü–µ—Ä–µ–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π User-Agent
                logger=self.logger
            )
            workers.append(worker)
        
        self.logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(workers)} –≤–æ—Ä–∫–µ—Ä–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ User-Agent")
        return workers
    
    def category_name_and_id(
            self, 
            url: str
        ) -> Tuple[Optional[str], Optional[int]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ URL
        
        Returns:
            Tuple[Optional[str], Optional[int]]: (–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, id_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏) –∏–ª–∏ (None, None) –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ ID
            pattern = r'/ua/([^/]+)/c(\d+)/'
            match = re.search(pattern, url)
            
            if not match:
                self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ URL: {url}")
                return None, None
                
            category_name = match.group(1)  # monitors
            category_id = int(match.group(2))  # 80089
            
            # –ú–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
            category_name = category_name.replace('_', ' ').title()
            
            self.logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ: {category_name} (ID: {category_id})")
            return category_name, category_id
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL {url}: {e}")
            return None, None
        
    def collect_product_ids_with_workers(
            self, 
            category_id: int = 80089, 
            max_workers: int = 10,
            filters: Optional[List[str]] = None,
            sort_list: Optional[List[str]] = None,
            default_parse: bool = False
        ) -> Set[str]:
        """
        –°–æ–±–∏—Ä–∞–µ—Ç ID —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å.
        """
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–µ–Ω–¥—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        self.logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±—Ä–µ–Ω–¥–æ–≤...")
        api = RozetkaAPI()
        brands_data = api.search_brands_for_category(category_id)
        
        if not brands_data:
            self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±—Ä–µ–Ω–¥—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            return set()
        
        self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(brands_data)} –±—Ä–µ–Ω–¥–æ–≤. –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä ID —Ç–æ–≤–∞—Ä–æ–≤...")
        
        all_product_ids = set()
        
        # –°–æ–∑–¥–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—Ä–µ–Ω–¥–æ–≤
        workers = self.create_api_workers(max_workers)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ThreadPoolExecutor –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—Ä–µ–Ω–¥–æ–≤
        with ThreadPoolExecutor(max_workers=max_workers) as executor:
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –±—Ä–µ–Ω–¥—ã –º–µ–∂–¥—É –≤–æ—Ä–∫–µ—Ä–∞–º–∏
            future_to_brand = {
                executor.submit(workers[i % len(workers)].get_product_ids_for_brand, 
                            brand_data, category_id, filters, sort_list, default_parse): brand_name 
                for i, (brand_name, brand_data) in enumerate(brands_data.items())
            }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º concurrent.futures.as_completed
            completed_count = 0
            for future in concurrent.futures.as_completed(future_to_brand):  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
                brand_name = future_to_brand[future]
                completed_count += 1
                
                try:
                    brand_product_ids = future.result()
                    all_product_ids.update(brand_product_ids)
                    brand_stats = f'[{completed_count}/{len(brands_data)}]'
                    self.logger.info(f"{brand_stats} –ë—Ä–µ–Ω–¥ {brand_name}: –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(brand_product_ids)} ID, –≤—Å–µ–≥–æ: {len(all_product_ids)}")
                    
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±—Ä–µ–Ω–¥–∞ {brand_name}: {e}")
        
        self.logger.info(f"–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID —Ç–æ–≤–∞—Ä–æ–≤: {len(all_product_ids)}")
        return all_product_ids

    def process_batches_with_workers(
            self, 
            product_ids: Set[str], 
            batch_size: int = 60, 
            num_workers: int = 10
        ) -> List[Dict[str, Any]]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∞—Ç—á–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ—Ä–∫–µ—Ä–æ–≤
        
        Args:
            product_ids (Set[str]): –ú–Ω–æ–∂–µ—Å—Ç–≤–æ ID —Ç–æ–≤–∞—Ä–æ–≤
            batch_size (int): –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
            num_workers (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤
            
        Returns:
            List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        """
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º set –≤ list
        product_ids_list = list(product_ids)
        total_products = len(product_ids_list)
        
        self.logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {total_products} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å {num_workers} –≤–æ—Ä–∫–µ—Ä–∞–º–∏")
        
        # –°–æ–∑–¥–∞–µ–º –±–∞—Ç—á–∏
        batches = [product_ids_list[i:i + batch_size] for i in range(0, total_products, batch_size)]
        self.logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(batches)} –±–∞—Ç—á–µ–π –ø–æ {batch_size} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã
        workers = self.create_api_workers(num_workers)
        
        all_parsed_data = []
        
        # –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ô –ü–ê–†–°–ò–ù–ì –ë–ê–¢–ß–ï–ô
        with ThreadPoolExecutor(max_workers=num_workers) as executor:
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞—Ç—á–∏ –º–µ–∂–¥—É –≤–æ—Ä–∫–µ—Ä–∞–º–∏
            future_to_batch = {
                executor.submit(workers[i % len(workers)].process_single_batch, batch): batch 
                for i, batch in enumerate(batches)
            }
            
            completed = 0
            for future in concurrent.futures.as_completed(future_to_batch):
                batch = future_to_batch[future]
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–∞—Ç—á–∞
                    parsed_batch = future.result()
                    
                    if parsed_batch:
                        all_parsed_data.extend(parsed_batch)
                        completed += 1
                        self.logger.info(f"‚úÖ –ë–∞—Ç—á: {len(parsed_batch)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ | –í—Å–µ–≥–æ: {len(all_parsed_data)}/{total_products}")
                    else:
                        self.logger.warning(f"‚ö†Ô∏è –ë–∞—Ç—á –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
                    
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞: {e}")
        
        return all_parsed_data

    def collect_product_ids(
            self, 
            category_id: int
        ) -> Set[str]:
        """
        –°–æ–±–∏—Ä–∞–µ—Ç ID —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        """
        self.logger.info("üéØ –°–±–æ—Ä ID —Ç–æ–≤–∞—Ä–æ–≤...")
        
        product_ids = self.collect_product_ids_with_workers(
            category_id=category_id,
            max_workers=self.settings.rozetka.max_workers,
            filters=self.settings.rozetka.filters,
            sort_list=self.settings.rozetka.sort_list,
            default_parse=self.settings.rozetka.default_parse
        )
        
        self.logger.info(f"üì¶ –°–æ–±—Ä–∞–Ω–æ {len(product_ids)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID —Ç–æ–≤–∞—Ä–æ–≤")
        return product_ids

    def save_results(
            self, 
            data: List[Dict[str, Any]], 
            name_category: str
        ) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
        """
        self.logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        
        save_format = self.settings.rozetka.save_data.lower()
        
        if save_format in ['csv', 'both']:
            csv_writer = CSVWriter(f"{name_category}_data.csv")
            csv_writer.write(data)
            self.logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {name_category}_data.csv")
        
        if save_format in ['json', 'both']:
            json_writer = JSONWriter(f"{name_category}_data.json")
            json_writer.write(data)
            self.logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {name_category}_data.json")
        
        if save_format not in ['csv', 'json', 'both']:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {save_format}")

    def print_statistics(
            self, 
            start_time: float, 
            stages_timing: Dict[str, float], 
            total_ids: int, 
            parsed_products: int
        ) -> None:
        """
        –í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        total_duration = time.time() - start_time
        
        self.logger.info("\n" + "="*60)
        self.logger.info("üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–†–ï–ú–ï–ù–ò –í–´–ü–û–õ–ù–ï–ù–ò–Ø")
        self.logger.info("="*60)
        
        for stage_name, stage_duration in stages_timing.items():
            self.logger.info(f"‚è∞ {stage_name}: {stage_duration:.3f} —Å–µ–∫")
        
        self.logger.info(f"üïê –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_duration:.3f} —Å–µ–∫")
        
        self.logger.info("\nüìà –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")
        self.logger.info(f"   –í—Å–µ–≥–æ ID: {total_ids}")
        self.logger.info(f"   –°–æ–±—Ä–∞–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {parsed_products}")
        
        if total_duration > 0:
            total_speed = parsed_products / total_duration
            self.logger.info(f"   –û–±—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {total_speed:.3f} –ø—Ä–æ–¥—É–∫—Ç–æ–≤/—Å–µ–∫")
        
        self.logger.info(f"\nüöÄ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –≤: {datetime.fromtimestamp(start_time).strftime('%Y-%m-%d %H:%M:%S')}")
        self.logger.info(f"‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –≤: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.logger.info("="*60)

    def start(self):

        self.logger.info(f"üöÄ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –≤: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

        categories = read_txt('category_to_parse.txt')
        if not categories: 
            self.logger.error(f"‚ùå –ù–µ—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
            return

        for category_url in categories:
            # –û–±—â–µ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
            total_start_time = time.time()
            stages_timing = {}
            name, category_id = self.category_name_and_id(category_url)
            
            if not category_id:
                self.logger.error(f"‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category_url}")
                continue
                
            self.logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {name} (ID: {category_id})")
            try:
                # 1. –°–±–æ—Ä ID —Ç–æ–≤–∞—Ä–æ–≤
                stage_start = time.time()
                product_ids = self.collect_product_ids(category_id)
                stages_timing['–°–±–æ—Ä ID —Ç–æ–≤–∞—Ä–æ–≤'] = time.time() - stage_start

                if not product_ids:
                    self.logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ ID –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                    return

                # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–µ–π —Å –≤–æ—Ä–∫–µ—Ä–∞–º–∏
                stage_start = time.time()
                self.logger.info("üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–µ–π —Å –≤–æ—Ä–∫–µ—Ä–∞–º–∏...")
                parsed_data = self.process_batches_with_workers(
                    product_ids=product_ids,
                    batch_size=60,
                    num_workers=10
                )
                stages_timing['–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–µ–π'] = time.time() - stage_start

                # 3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                stage_start = time.time()
                self.save_results(parsed_data, name)
                stages_timing['–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'] = time.time() - stage_start

                # 4. –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                self.print_statistics(total_start_time, stages_timing, len(product_ids), len(parsed_data))

            except Exception as e:
                self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ start: {e}")